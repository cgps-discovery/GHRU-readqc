/*
 * Nextflow configuration for GHRU ReadQC Pipeline
 */

// Global default params
params {
    // Input/output options
    input = null
    outdir = './results'
    
    // Help
    help = false
    
    // Resource defaults
    max_memory = '128.GB'
    max_cpus = 16
    max_time = '240.h'
}

// Process-specific configurations
process {
    // Global process configuration
    cpus = { check_max(2 * task.attempt, 'cpus') }
    memory = { check_max(6.GB * task.attempt, 'memory') }
    time = { check_max(4.h * task.attempt, 'time') }
    
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 1
    maxErrors = '-1'
    
    // Process-specific resource requirements
    withName: FASTP {
        cpus = { check_max(4 * task.attempt, 'cpus') }
        memory = { check_max(8.GB * task.attempt, 'memory') }
        time = { check_max(2.h * task.attempt, 'time') }
    }
    
    withName: SYLPH {
        cpus = { check_max(8 * task.attempt, 'cpus') }
        memory = { check_max(16.GB * task.attempt, 'memory') }
        time = { check_max(4.h * task.attempt, 'time') }
    }
    
    withName: ARIBA_MLST {
        cpus = { check_max(4 * task.attempt, 'cpus') }
        memory = { check_max(12.GB * task.attempt, 'memory') }
        time = { check_max(3.h * task.attempt, 'time') }
    }
    
    withName: PICK_SMALLEST_GENOME {
        cpus = 1
        memory = { check_max(2.GB * task.attempt, 'memory') }
        time = { check_max(30.min * task.attempt, 'time') }
    }
    
    withName: CALCULATE_DEPTH {
        cpus = 1
        memory = { check_max(4.GB * task.attempt, 'memory') }
        time = { check_max(1.h * task.attempt, 'time') }
    }
    
    withName: MULTIQC {
        cpus = { check_max(2 * task.attempt, 'cpus') }
        memory = { check_max(6.GB * task.attempt, 'memory') }
        time = { check_max(1.h * task.attempt, 'time') }
    }
}

// Execution profiles
profiles {
    debug { process.debug = true }
    
    conda {
        conda.enabled = true
        docker.enabled = false
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
    }
    
    docker {
        docker.enabled = true
        docker.userEmulation = true
        conda.enabled = false
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
    }
    
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        conda.enabled = false
        docker.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
    }
    
    test {
        params.input = "${projectDir}/test/data"
        params.outdir = "${projectDir}/test/results"
    }
}

// Export these variables to prevent local Python/R libraries from conflicting with conda environments
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER = "/.Rprofile"
    R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: ${obj}"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: ${obj}"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: ${obj}"
            return obj
        }
    }
}

// Workflow summary
def summary = [:]
summary['Pipeline Name'] = 'GHRU-readqc'
summary['Pipeline Version'] = '1.0.0'
summary['Run Name'] = workflow.runName
summary['Input'] = params.input
summary['Output dir'] = params.outdir
summary['Max Resources'] = "$params.max_memory memory, $params.max_cpus cpus, $params.max_time time per job"
summary['Container Engine'] = workflow.containerEngine
summary['Container'] = workflow.container
summary['Current home'] = "$HOME"
summary['Current user'] = "$USER"
summary['Current path'] = "$PWD"
summary['Working dir'] = workflow.workDir
summary['Output dir'] = file(params.outdir)
summary['Script dir'] = workflow.projectDir
summary['Config Profile'] = workflow.profile

if (workflow.containerEngine) summary['Container'] = "$workflow.containerEngine - $workflow.container"

log.info summary.collect { k,v -> "${k.padRight(18)}: $v" }.join("\n")
log.info "-\033[2m--------------------------------------------------\033[0m-"